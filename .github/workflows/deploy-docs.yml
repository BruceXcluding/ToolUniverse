name: Deploy ToolUniverse Documentation

on:
  push:
    branches: [main, master]
    paths:
      - 'docs/**'
      - 'src/**'
      - 'pyproject.toml'
      - '.github/workflows/deploy-docs.yml'
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 1  # Shallow clone for faster checkout
      
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'
        
    - name: Cache Sphinx build
      uses: actions/cache@v4
      with:
        path: |
          docs/_build/doctrees
          docs/api
        key: sphinx-${{ runner.os }}-${{ hashFiles('docs/**/*.rst', 'docs/**/*.py', 'src/**/*.py', 'pyproject.toml') }}
        restore-keys: |
          sphinx-${{ runner.os }}-
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip uv
        # Install project with docs extras (includes all documentation dependencies)
        uv pip install --system -e .[docs]
        # Install additional requirements from docs/requirements.txt
        pip install -r docs/requirements.txt
        
    - name: Verify documentation setup
      run: |
        echo "üîç Verifying Sphinx and theme installation..."
        python -c "import sphinx; print(f'‚úÖ Sphinx {sphinx.__version__}')"
        python -c "import furo; print('‚úÖ Furo theme available')" || echo "‚ö†Ô∏è Furo theme not available"
        python -c "import pydata_sphinx_theme; print('‚úÖ PyData theme available')" || echo "‚ö†Ô∏è PyData theme not available"
        python -c "import sphinx_rtd_theme; print('‚úÖ RTD theme available')" || echo "‚ö†Ô∏è RTD theme not available"
        python -c "import shibuya; print('‚úÖ Shibuya theme available')" || echo "‚ö†Ô∏è Shibuya theme not available"
        python -c "from linkify_it import LinkifyIt; print('‚úÖ Linkify available')"
        python -c "import myst_parser; print('‚úÖ MyST parser available')"
        python -c "import sphinx_design; print('‚úÖ Sphinx Design available')"
        python -c "import sphinx_copybutton; print('‚úÖ Sphinx Copybutton available')"
        python -c "import sphinx_tabs; print('‚úÖ Sphinx Tabs available')"
        
    - name: Prepare assets
      run: |
        cd docs
        mkdir -p _static
        if [ -f "../img/tooluniverse_logo.png" ]; then
          cp ../img/tooluniverse_logo.png _static/
          echo "‚úÖ Logo prepared"
        fi
        
    - name: Build documentation
      run: |
        cd docs
        # Skip dependency installation in script (already done above)
        # Use optimized API doc generation settings
        echo "üî® Building documentation with optimized settings..."
        DOC_LANGUAGES="en,zh_CN" \
        DOC_SKIP_SERVER_PROMPT=1 \
        DOC_SKIP_INSTALL=1 \
        DOC_OPTIMIZED=1 \
        ./quick_doc_build.sh
        
    - name: Check build output
      run: |
        if [ ! -f docs/_build/html/index.html ]; then
          echo "‚ùå Root index.html not found!"
          exit 1
        fi
        echo "‚úÖ Documentation built successfully"
        du -sh docs/_build/html
        
    - name: Add .nojekyll file
      run: |
        touch docs/_build/html/.nojekyll
        
    # Note: Do NOT create a CNAME here. This project is served under
    # https://zitniklab.hms.harvard.edu/ToolUniverse/.
    # Adding a CNAME would incorrectly claim the root domain.
        
    - name: Setup Pages
      uses: actions/configure-pages@v4
      
    - name: Upload artifact
      uses: actions/upload-pages-artifact@v3
      with:
        path: './docs/_build/html'
        
    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4

  test-deployment:
    runs-on: ubuntu-latest
    needs: build-and-deploy
    if: always()
    
    steps:
    - name: Report deployment status
      run: |
        if [[ "${{ needs.build-and-deploy.result }}" == "success" ]]; then
          echo "‚úÖ Documentation deployment successful!"
          echo "üé® Modern theme with enhanced styling applied"
          echo "üìñ Documentation available at: https://zitniklab.hms.harvard.edu/ToolUniverse/"
          echo "   ‚Ä¢ Root (auto-redirects to English): https://zitniklab.hms.harvard.edu/ToolUniverse/"
          echo "   ‚Ä¢ English: https://zitniklab.hms.harvard.edu/ToolUniverse/en/"
          echo "   ‚Ä¢ Chinese: https://zitniklab.hms.harvard.edu/ToolUniverse/zh-CN/"
          echo "   ‚Ä¢ English API: https://zitniklab.hms.harvard.edu/ToolUniverse/en/api/modules.html"
          echo "   ‚Ä¢ Chinese API: https://zitniklab.hms.harvard.edu/ToolUniverse/zh-CN/api/modules.html"
          echo "üåü Features:"
          echo "   ‚Ä¢ Multi-language support with automatic redirects"
          echo "   ‚Ä¢ Backward compatibility with old /en/ links"
          echo "   ‚Ä¢ Language switcher in navigation bar"
          echo "   ‚Ä¢ Modern responsive design"
          echo "   ‚Ä¢ Dark/light mode support (if Furo theme)"
          echo "   ‚Ä¢ Enhanced code highlighting"
          echo "   ‚Ä¢ Improved navigation"
        else
          echo "‚ùå Documentation deployment failed!"
          echo "Build status: ${{ needs.build-and-deploy.result }}"
          echo "üìù Common issues:"
          echo "   ‚Ä¢ Missing theme dependencies (run: pip install -r docs/requirements.txt)"
          echo "   ‚Ä¢ Theme compatibility problems (check .. contents:: directives)"
          echo "   ‚Ä¢ Configuration errors (verify conf*.py files)"
          echo "üí° Check the build logs for specific error messages"
          exit 1
        fi
