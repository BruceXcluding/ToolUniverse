name: Deploy ToolUniverse Documentation

on:
  push:
    branches: [main, master]
    paths:
      - 'docs/**'
      - 'src/**'
      - 'pyproject.toml'
      - '.github/workflows/deploy-docs.yml'
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        cache: 'pip'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        # Install the package with docs dependencies (includes sphinx-shibuya)
        pip install -e .[docs]
        
    - name: Verify documentation setup
      run: |
        python -c "import sphinx; print(f'Sphinx version: {sphinx.__version__}')"
        # Verify theme availability
        python -c "import shibuya; print('✅ Shibuya theme available')"
        python -c "import pydata_sphinx_theme; print('✅ PyData theme available')"
        python -c "import sphinx_rtd_theme; print('✅ RTD theme available')"
        python -c "from linkify_it import LinkifyIt; print('✅ Linkify available')"
        ls -la docs/
        ls -la docs/conf*.py
        # Check logo file availability
        ls -la img/ || echo "⚠️ img directory not found"
        ls -la img/tooluniverse_logo.png || echo "⚠️ Logo file not found"
        
    - name: Fix contents directive compatibility
      run: |
        cd docs
        # Create fix script for CI environment
        cat > fix_contents_ci.py << 'EOF'
        import os
        import re
        import glob
        
        def fix_contents_directive(file_path):
            try:
                with open(file_path, 'r', encoding='utf-8') as f:
                    content = f.read()
                
                # Pattern to match .. contents:: directive and its options
                pattern = r'^\.\. contents::.*?(?=^\S|\Z)'
                fixed_content = re.sub(pattern, '', content, flags=re.MULTILINE | re.DOTALL)
                fixed_content = re.sub(r'\n\n\n+', '\n\n', fixed_content)
                
                if fixed_content != content:
                    with open(file_path, 'w', encoding='utf-8') as f:
                        f.write(fixed_content)
                    print(f"✅ Fixed: {file_path}")
                    return True
                return False
            except Exception as e:
                print(f"❌ Error processing {file_path}: {e}")
                return False
        
        # Process all RST files
        rst_files = glob.glob('**/*.rst', recursive=True)
        fixed_count = 0
        for file_path in rst_files:
            if fix_contents_directive(file_path):
                fixed_count += 1
        
        print(f"Fixed {fixed_count} files for Sphinx compatibility")
        EOF
        
        python fix_contents_ci.py
        
    - name: Verify Shibuya theme
      run: |
        cd docs
        # Verify shibuya theme is available
        python -c "import shibuya; print('✅ Shibuya theme verified')"
        # Check that conf.py exists and uses shibuya theme
        if grep -q "html_theme = \"shibuya\"" conf.py; then
          echo "✅ conf.py correctly configured for Shibuya theme"
        else
          echo "❌ conf.py not configured for Shibuya theme"
          exit 1
        fi
        
        # Update logo paths in configuration files to use both original and _static paths
        cat > update_logo_path.py << 'EOF'
        import re
        
        files_to_update = ['conf.py']
        
        for file_name in files_to_update:
            try:
                with open(file_name, 'r') as f:
                    content = f.read()
                
                # Update logo path to check multiple locations
                logo_pattern = r"html_logo = '[^']*tooluniverse_logo\.png'[^']*"
                new_logo = "html_logo = '../img/tooluniverse_logo.png' if os.path.exists('../img/tooluniverse_logo.png') else ('_static/tooluniverse_logo.png' if os.path.exists('_static/tooluniverse_logo.png') else None)"
                
                # Simple replacement for the logo line
                content = re.sub(r"html_logo = '[^']*'[^']*else None", new_logo, content)
                
                with open(file_name, 'w') as f:
                    f.write(content)
                    
                print(f"✅ Updated logo path in {file_name}")
            except Exception as e:
                print(f"⚠️ Could not update {file_name}: {e}")
        EOF
        
        python update_logo_path.py
        
    - name: Prepare logo and assets
      run: |
        cd docs
        # Ensure _static directory exists
        mkdir -p _static
        # Copy logo to _static directory to ensure it's available
        if [ -f "../img/tooluniverse_logo.png" ]; then
          cp ../img/tooluniverse_logo.png _static/
          echo "✅ Logo copied to _static directory"
        else
          echo "⚠️ Logo file not found at ../img/tooluniverse_logo.png"
        fi
        # List _static contents
        ls -la _static/
        
    - name: Build documentation
      run: |
        cd docs
        rm -rf _build/*
        # Build with multi-language support and proper redirects
        echo "🔨 Starting documentation build..."
        DOC_LANGUAGES="en,zh_CN" DOC_SKIP_SERVER_PROMPT=1 ./quick_doc_build.sh
        echo "🔍 Build completed, checking output..."
        ls -la _build/
        ls -la _build/html/ || echo "❌ _build/html directory not found!"
        
    - name: Check build output
      run: |
        echo "🔍 Checking build output..."
        ls -la docs/_build/html/ || (echo "❌ _build/html directory not found!" && exit 1)
        
        # Check if root index.html exists (this is critical)
        if [ -f docs/_build/html/index.html ]; then
          echo "✅ Root index.html found"
        else
          echo "❌ Root index.html not found!"
          exit 1
        fi
        
        # Check if logo was properly included in build
        ls -la docs/_build/html/_static/ | grep -i logo || echo "⚠️ Logo not found in _static"
        # Check if logo is referenced in HTML
        grep -r "tooluniverse_logo" docs/_build/html/ || echo "⚠️ Logo not referenced in HTML"
        
        # Verify multilingual build structure (optional, don't fail if missing)
        if [ -d docs/_build/html/en ]; then
          echo "✅ English directory found"
          test -f docs/_build/html/en/expand_tooluniverse/index.html || echo "⚠️ Missing English expand_tooluniverse index"
        else
          echo "⚠️ English directory not found"
        fi
        
        if [ -d docs/_build/html/zh-CN ]; then
          echo "✅ Chinese directory found"
          test -f docs/_build/html/zh-CN/expand_tooluniverse/index.html || echo "⚠️ Missing Chinese expand_tooluniverse index"
        else
          echo "⚠️ Chinese directory not found"
        fi
        
        # Check .htaccess file exists for Apache servers
        test -f docs/_build/html/.htaccess || echo "⚠️ .htaccess file not found (may not be needed for GitHub Pages)"
        # Verify language switcher JavaScript
        test -f docs/_build/html/_static/language_switcher.js || echo "⚠️ Language switcher JavaScript not found"
        echo "✅ Build verification completed"
        
    - name: Add .nojekyll file
      run: |
        touch docs/_build/html/.nojekyll
        
    # Note: Do NOT create a CNAME here. This project is served under
    # https://zitniklab.hms.harvard.edu/ToolUniverse/.
    # Adding a CNAME would incorrectly claim the root domain.
        
    - name: Setup Pages
      uses: actions/configure-pages@v4
      
    - name: Upload artifact
      uses: actions/upload-pages-artifact@v3
      with:
        path: './docs/_build/html'
        
    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4

  test-deployment:
    runs-on: ubuntu-latest
    needs: build-and-deploy
    if: always()
    
    steps:
    - name: Report deployment status
      run: |
        if [[ "${{ needs.build-and-deploy.result }}" == "success" ]]; then
          echo "✅ Documentation deployment successful!"
          echo "🎨 Modern theme with enhanced styling applied"
          echo "📖 Documentation available at: https://zitniklab.hms.harvard.edu/ToolUniverse/"
          echo "   • Root (auto-redirects to English): https://zitniklab.hms.harvard.edu/ToolUniverse/"
          echo "   • English: https://zitniklab.hms.harvard.edu/ToolUniverse/en/"
          echo "   • Chinese: https://zitniklab.hms.harvard.edu/ToolUniverse/zh-CN/"
          echo "   • English API: https://zitniklab.hms.harvard.edu/ToolUniverse/en/api/modules.html"
          echo "   • Chinese API: https://zitniklab.hms.harvard.edu/ToolUniverse/zh-CN/api/modules.html"
          echo "🌟 Features:"
          echo "   • Multi-language support with automatic redirects"
          echo "   • Backward compatibility with old /en/ links"
          echo "   • Language switcher in navigation bar"
          echo "   • Modern responsive design"
          echo "   • Dark/light mode support (if Furo theme)"
          echo "   • Enhanced code highlighting"
          echo "   • Improved navigation"
        else
          echo "❌ Documentation deployment failed!"
          echo "Build status: ${{ needs.build-and-deploy.result }}"
          echo "📝 Common issues:"
          echo "   • Missing theme dependencies (run: pip install -r docs/requirements_ci.txt)"
          echo "   • Theme compatibility problems (check .. contents:: directives)"
          echo "   • Configuration errors (verify conf*.py files)"
          echo "💡 Check the build logs for specific error messages"
          exit 1
        fi
