version: '3.8'

services:
  dnabert2:
    build:
      context: ./dnabert2
      dockerfile: Dockerfile
    image: tooluniverse/dnabert2:latest
    container_name: dnabert2-server
    ports:
      - "8001:8001"  # API端口
      - "8011:8011"  # 监控指标端口
    environment:
      - PYTHONPATH=/app
      - PYTHONUNBUFFERED=1
    volumes:
      - ./models:/app/models  # 模型文件挂载
    deploy:
      resources:
        limits:
          memory: 8G
        reservations:
          devices:
            - driver: nvidia
              count: all
              capabilities: [gpu]
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 30s
      retries: 3
      start_period: 40s
    networks:
      - model-network

  lucaone:
    build:
      context: ./lucaone
      dockerfile: Dockerfile
    image: tooluniverse/lucaone:latest
    container_name: lucaone-server
    ports:
      - "8002:8002"  # API端口
      - "8012:8012"  # 监控指标端口
    environment:
      - PYTHONPATH=/app
      - PYTHONUNBUFFERED=1
    volumes:
      - ./models:/app/models  # 模型文件挂载
    deploy:
      resources:
        limits:
          memory: 16G
        reservations:
          devices:
            - driver: nvidia
              count: all
              capabilities: [gpu]
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8002/health"]
      interval: 30s
      timeout: 30s
      retries: 3
      start_period: 40s
    networks:
      - model-network

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - model-network

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
    restart: unless-stopped
    networks:
      - model-network

  agent-api:
    build:
      context: ..
      dockerfile: ./docker/agent_api/Dockerfile
    image: tooluniverse/agent-api:latest
    container_name: agent-api-server
    ports:
      - "5000:5000"  # API端口
    environment:
      - PYTHONPATH=/app/src
      - PYTHONUNBUFFERED=1
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock  # 挂载Docker socket
    depends_on:
      - dnabert2
      - lucaone
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 30s
      retries: 3
      start_period: 40s
    networks:
      - model-network

networks:
  model-network:
    driver: bridge

volumes:
  prometheus_data:
  grafana_data: