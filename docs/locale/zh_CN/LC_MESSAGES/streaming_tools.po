msgid ""
msgstr ""
"Project-Id-Version: ToolUniverse\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-05-28 00:00+0000\n"
"PO-Revision-Date: 2024-05-28 00:00+0000\n"
"Last-Translator: \n"
"Language-Team: Chinese\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Streaming Tools Tutorial"
msgstr "流式工具教程"

msgid ".. contents:: Table of Contents"
msgstr ".. contents:: 目录"

msgid "What Is Streaming Mode?"
msgstr "什么是流式模式？"

msgid "*Streaming* lets a tool send partial results back to the caller while the task is still running. Instead of waiting for the entire response, the caller receives chunks (text fragments, structured updates, etc.) in real time. This is useful when:"
msgstr "在流式模式下，工具可以在任务执行过程中把部分结果实时返回给调用方。调用者无需等待完整输出，就能分批获取文本片段或结构化更新等数据块，适用于："

msgid "* Responses are long or detailed and you want early insight"
msgstr "* 结果较长，希望尽早了解总体方向"

msgid "* The user interface (CLI, notebook, MCP client) benefits from progressive updates"
msgstr "* 终端、Notebook、MCP 客户端等界面需要渐进式反馈"

msgid "* You plan to pipe each chunk into another system (logging, partial rendering, incremental processing)"
msgstr "* 每个数据块都要进一步处理，例如写日志、局部渲染或增量计算"

msgid "All tools built on :class:`AgenticTool` already support streaming. Other tool types can opt in by following the instructions in :ref:`building-custom-streaming-tools`."
msgstr "所有基于 :class:`AgenticTool` 构建的工具都已原生支持流式输出。其他工具类型可以根据 :ref:`building-custom-streaming-tools` 的步骤自行集成。"

msgid "Streaming Built-in Agentic Tools"
msgstr "使用内置 Agentic 工具的流式功能"

msgid "The ToolUniverse distribution ships with many Agentic tools, such as ``ScientificTextSummarizer`` (defined in ``agentic_tools.json``). The snippet below shows how to run it with a streaming callback using ``ToolUniverse.run``:"
msgstr "ToolUniverse 内置了大量 Agentic 工具，例如定义在 ``agentic_tools.json`` 中的 ``ScientificTextSummarizer``。下面的示例演示如何配合 ``ToolUniverse.run`` 与回调函数实现流式输出："

msgid "Key points:"
msgstr "要点："

msgid "* Passing ``stream_callback`` tells ToolUniverse that the caller can accept streamed chunks."
msgstr "* 传入 ``stream_callback`` 表示调用方可以接收流式数据块。"

msgid "* ``ToolUniverse.run`` accepts the same JSON structure used by MCP calls. When a callback is present the framework automatically sets ``AgenticTool.STREAM_FLAG_KEY`` in the argument dict so AgenticTool knows streaming was requested."
msgstr "* ``ToolUniverse.run`` 接受与 MCP 调用相同的 JSON 结构。一旦提供回调，框架会自动在参数字典中设置 ``AgenticTool.STREAM_FLAG_KEY``，确保 AgenticTool 知道需要启用流式输出。"

msgid "* If the callback is omitted the tool still works—it simply returns one final string."
msgstr "* 如果没有回调，工具仍会正常执行，只是一次性返回完整结果。"

msgid "The streaming demonstration script ``examples/agentic_streaming_example.py`` wraps the same logic with a longer prompt so chunks are visually obvious."
msgstr "仓库中的 ``examples/agentic_streaming_example.py`` 示例脚本使用更长的 prompt 演示相同流程，能够直观展示流式数据块。"

msgid "Streaming via MCP / JSON Parameters"
msgstr "在 MCP / JSON 调用中开启流式输出"

msgid "When the client cannot pass a Python callback (for example, MCP or pure HTTP JSON), stream mode can be toggled in the arguments using the flag defined by the tool's ``STREAM_FLAG_KEY`` (``_tooluniverse_stream`` for AgenticTool-based tools):"
msgstr "当客户端无法提供 Python 回调时（例如 MCP 或纯 JSON 请求），可以在参数里设置工具声明的 ``STREAM_FLAG_KEY``（AgenticTool 默认为 ``_tooluniverse_stream``）来开启流式模式："

msgid "The SMCP server forwards each streamed chunk as a ``ctx.info`` log message. The final aggregated result is still returned via the normal MCP response."
msgstr "SMCP 服务器会将实时数据块转换为 ``ctx.info`` 日志通知发送给客户端，最后的汇总结果仍通过常规 MCP 响应返回。"

msgid "Building Your Own Streaming Tool"
msgstr "自定义工具如何支持流式"

msgid "Any custom tool can opt into streaming with three small changes:"
msgstr "自定义工具只需完成以下三步即可具备流式能力："

msgid "1. **Declare a flag key** on the class so ToolUniverse knows which argument to populate when a callback is provided."
msgstr "1. **在类上声明流式旗标**，用于与 ToolUniverse 协议沟通。"

msgid "2. **Accept ``stream_callback`` in ``run`` and forward chunks.** Remove the flag from the argument dict before downstream validation."
msgstr "2. **在 ``run`` 中接受 ``stream_callback`` 并输出数据块**，记得在后续校验前移除该旗标。"

msgid "   If the tool cannot deliver chunks for some reason, fall back to your non-streaming path (as AgenticTool does)."
msgstr "   如果工具因故无法流式输出，请回退到普通执行路径（与 AgenticTool 的做法一致）。"

msgid "3. **Optional** – document the flag in the tool's schema if external callers should be able to toggle streaming without relying on ``stream_callback``."
msgstr "3. **可选** – 如果希望外部调用者也能手动控制流式开关，可在 schema 中记录该旗标。"

msgid "Testing"
msgstr "测试"

msgid "Use the existing test suites as references when adding streaming support:"
msgstr "在集成流式能力时，可以参考以下测试："

msgid "* ``tests/test_streaming_support.py`` – Unit tests covering callback injection and automatic flag handling."
msgstr "* ``tests/test_streaming_support.py`` – 验证回调注入与旗标处理的单元测试。"

msgid "* ``tests/test_agentic_streaming_integration.py`` – Integration tests covering AgenticTool streaming and SMCP log propagation."
msgstr "* ``tests/test_agentic_streaming_integration.py`` – 覆盖 AgenticTool 与 SMCP 流式行为的集成测试。"

msgid "Run them with:"
msgstr "运行方式："
